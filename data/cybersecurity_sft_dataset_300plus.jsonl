{"instruction": "Explain A01:2021 Broken Access Control with a plain‑English summary and why it matters.", "output": "Broken Access Control occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A01:2021 Broken Access Control that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A01:2021 Broken Access Control (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A01:2021 Broken Access Control.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A01:2021 Broken Access Control risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A01:2021 Broken Access Control using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A01:2021 Broken Access Control and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A01:2021 Broken Access Control.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A01:2021 Broken Access Control plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A01:2021 Broken Access Control checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A01:2021 Broken Access Control exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A01:2021 Broken Access Control.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A02:2021 Cryptographic Failures with a plain‑English summary and why it matters.", "output": "Cryptographic Failures occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A02:2021 Cryptographic Failures that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A02:2021 Cryptographic Failures (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A02:2021 Cryptographic Failures.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A02:2021 Cryptographic Failures risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A02:2021 Cryptographic Failures using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A02:2021 Cryptographic Failures and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A02:2021 Cryptographic Failures.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A02:2021 Cryptographic Failures plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A02:2021 Cryptographic Failures checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A02:2021 Cryptographic Failures exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A02:2021 Cryptographic Failures.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A03:2021 Injection with a plain‑English summary and why it matters.", "output": "Injection occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A03:2021 Injection that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A03:2021 Injection (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A03:2021 Injection.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A03:2021 Injection risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A03:2021 Injection using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A03:2021 Injection and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A03:2021 Injection.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A03:2021 Injection plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A03:2021 Injection checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A03:2021 Injection exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A03:2021 Injection.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A04:2021 Insecure Design with a plain‑English summary and why it matters.", "output": "Insecure Design occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A04:2021 Insecure Design that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A04:2021 Insecure Design (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A04:2021 Insecure Design.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A04:2021 Insecure Design risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A04:2021 Insecure Design using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A04:2021 Insecure Design and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A04:2021 Insecure Design.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A04:2021 Insecure Design plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A04:2021 Insecure Design checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A04:2021 Insecure Design exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A04:2021 Insecure Design.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A05:2021 Security Misconfiguration with a plain‑English summary and why it matters.", "output": "Security Misconfiguration occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A05:2021 Security Misconfiguration that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A05:2021 Security Misconfiguration (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A05:2021 Security Misconfiguration.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A05:2021 Security Misconfiguration risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A05:2021 Security Misconfiguration using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A05:2021 Security Misconfiguration and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A05:2021 Security Misconfiguration.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A05:2021 Security Misconfiguration plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A05:2021 Security Misconfiguration checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A05:2021 Security Misconfiguration exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A05:2021 Security Misconfiguration.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A06:2021 Vulnerable and Outdated Components with a plain‑English summary and why it matters.", "output": "Vulnerable and Outdated Components occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A06:2021 Vulnerable and Outdated Components that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A06:2021 Vulnerable and Outdated Components (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A06:2021 Vulnerable and Outdated Components.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A06:2021 Vulnerable and Outdated Components risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A06:2021 Vulnerable and Outdated Components using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A06:2021 Vulnerable and Outdated Components and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A06:2021 Vulnerable and Outdated Components.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A06:2021 Vulnerable and Outdated Components plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A06:2021 Vulnerable and Outdated Components checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A06:2021 Vulnerable and Outdated Components exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A06:2021 Vulnerable and Outdated Components.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A07:2021 Identification and Authentication Failures with a plain‑English summary and why it matters.", "output": "Identification and Authentication Failures occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A07:2021 Identification and Authentication Failures that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A07:2021 Identification and Authentication Failures (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A07:2021 Identification and Authentication Failures.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A07:2021 Identification and Authentication Failures risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A07:2021 Identification and Authentication Failures using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A07:2021 Identification and Authentication Failures and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A07:2021 Identification and Authentication Failures.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A07:2021 Identification and Authentication Failures plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A07:2021 Identification and Authentication Failures checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A07:2021 Identification and Authentication Failures exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A07:2021 Identification and Authentication Failures.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A08:2021 Software and Data Integrity Failures with a plain‑English summary and why it matters.", "output": "Software and Data Integrity Failures occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A08:2021 Software and Data Integrity Failures that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A08:2021 Software and Data Integrity Failures (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A08:2021 Software and Data Integrity Failures.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A08:2021 Software and Data Integrity Failures risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A08:2021 Software and Data Integrity Failures using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A08:2021 Software and Data Integrity Failures and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A08:2021 Software and Data Integrity Failures.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A08:2021 Software and Data Integrity Failures plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A08:2021 Software and Data Integrity Failures checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A08:2021 Software and Data Integrity Failures exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A08:2021 Software and Data Integrity Failures.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A09:2021 Security Logging and Monitoring Failures with a plain‑English summary and why it matters.", "output": "Security Logging and Monitoring Failures occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A09:2021 Security Logging and Monitoring Failures that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A09:2021 Security Logging and Monitoring Failures (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A09:2021 Security Logging and Monitoring Failures.", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A09:2021 Security Logging and Monitoring Failures risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A09:2021 Security Logging and Monitoring Failures using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A09:2021 Security Logging and Monitoring Failures and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A09:2021 Security Logging and Monitoring Failures.", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A09:2021 Security Logging and Monitoring Failures plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A09:2021 Security Logging and Monitoring Failures checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A09:2021 Security Logging and Monitoring Failures exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A09:2021 Security Logging and Monitoring Failures.", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Explain A10:2021 Server-Side Request Forgery (SSRF) with a plain‑English summary and why it matters.", "output": "Server-Side Request Forgery (SSRF) occurs when an app fails to enforce intended security controls. Impact: data exposure, account takeover, unauthorized actions. Keep enforcement server‑side, deny by default, and verify authorization on every request."}
{"instruction": "List actionable mitigations for A10:2021 Server-Side Request Forgery (SSRF) that a dev team can adopt this sprint.", "output": "• Adopt secure defaults and least privilege. • Centralize authorization & secrets; remove hardcoded creds. • Add parameterized queries/encoders; validate inputs at trust boundaries. • Patch dependencies regularly; pin versions; enable SBOM + SCA. • Add rate limits and robust error handling."}
{"instruction": "Describe detection and testing strategies for A10:2021 Server-Side Request Forgery (SSRF) (manual + automated).", "output": "Manual: abuse test with role switching and IDOR attempts; validate authz checks. Automated: unit tests for policy decisions; DAST for authz & injection; SAST for sinks. Observability: structured authz deny logs, anomaly alerts, and trace correlation."}
{"instruction": "Give one vulnerable code example and a secure rewrite for A10:2021 Server-Side Request Forgery (SSRF).", "output": "Vulnerable (pseudo‑Python): `user = User.get(id=request.args['id'])` -> leaks data. Secure: `user = User.get(id=authn.id)` and `authorize('view_user', user)`; enforce server‑side checks."}
{"instruction": "Produce a configuration hardening checklist to reduce A10:2021 Server-Side Request Forgery (SSRF) risk.", "output": "☐ Deny‑by‑default routes, explicit allow lists ☐ Parameterized queries & output encoding ☐ Security headers (CSP, HSTS, X‑Frame‑Options) ☐ Disable debug, index/listing, default creds ☐ SBOM + dependency policy gates"}
{"instruction": "Provide a quick threat model for A10:2021 Server-Side Request Forgery (SSRF) using STRIDE and common abuse cases.", "output": "STRIDE: Spoofing(auth), Tampering(inputs/config), Repudiation(insufficient logs), Information Disclosure(excess data), DoS(misconfig), Elevation(IDOR). Abuse: change someone else’s order; read admin reports; internal SSRF to metadata."}
{"instruction": "Share 3 short real‑world style incident stories related to A10:2021 Server-Side Request Forgery (SSRF) and lessons learned.", "output": "1) IDOR let users download others’ invoices; fix: centralized ABAC. 2) Missing TLS pinning exposed tokens; fix: rotate & enforce mTLS. 3) Debug endpoints leaked secrets; fix: disable in prod & add WAF."}
{"instruction": "Create 5 interview Q&A pairs that assess understanding of A10:2021 Server-Side Request Forgery (SSRF).", "output": "Q1: Difference between authN and authZ? A: Identity vs permissions. Q2: How to prevent SQLi? A: Prepared statements + validation. Q3: Why avoid detailed errors? A: Prevent info leaks/Recon."}
{"instruction": "List frequent pitfalls leading to A10:2021 Server-Side Request Forgery (SSRF) plus safer defaults.", "output": "• Relying on client‑side checks; • broad admin roles; • verbose errors; • outdated libs; • missing rate limits; • shared accounts."}
{"instruction": "Explain how to build A10:2021 Server-Side Request Forgery (SSRF) checks into CI/CD (DevSecOps).", "output": "Gate builds with SAST/SCA; run IaC scans; block critical vulns; Smoke tests with authz test suites post‑deploy; auto‑rollbacks on failure."}
{"instruction": "Recommend open‑source tools and platform settings to reduce A10:2021 Server-Side Request Forgery (SSRF) exposure.", "output": "Use: ZAP/Burp (DAST), Semgrep/Sonar (SAST), Trivy/Grype (SCA), CSP/WAF, OPA for policy‑as‑code, Vault for secrets."}
{"instruction": "Define measurable KPIs to track risk reduction for A10:2021 Server-Side Request Forgery (SSRF).", "output": "KPIs: % endpoints with RBAC, time‑to‑patch, # of authz test cases, false‑positive rate in WAF, MTTR for security misconfig findings."}
{"instruction": "Summarize MITRE ATT&CK T1566 Phishing and typical adversary behaviors.", "output": "Phishing (T1566) describes how attackers phishing to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1566 Phishing using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1566 Phishing.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1566 Phishing in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1190 Exploit Public-Facing Application and typical adversary behaviors.", "output": "Exploit Public-Facing Application (T1190) describes how attackers exploit public-facing application to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1190 Exploit Public-Facing Application using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1190 Exploit Public-Facing Application.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1190 Exploit Public-Facing Application in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1059 Command and Scripting Interpreter and typical adversary behaviors.", "output": "Command and Scripting Interpreter (T1059) describes how attackers command and scripting interpreter to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1059 Command and Scripting Interpreter using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1059 Command and Scripting Interpreter.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1059 Command and Scripting Interpreter in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1003 OS Credential Dumping and typical adversary behaviors.", "output": "OS Credential Dumping (T1003) describes how attackers os credential dumping to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1003 OS Credential Dumping using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1003 OS Credential Dumping.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1003 OS Credential Dumping in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1021 Remote Services and typical adversary behaviors.", "output": "Remote Services (T1021) describes how attackers remote services to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1021 Remote Services using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1021 Remote Services.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1021 Remote Services in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1047 Windows Management Instrumentation and typical adversary behaviors.", "output": "Windows Management Instrumentation (T1047) describes how attackers windows management instrumentation to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1047 Windows Management Instrumentation using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1047 Windows Management Instrumentation.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1047 Windows Management Instrumentation in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1041 Exfiltration Over C2 Channel and typical adversary behaviors.", "output": "Exfiltration Over C2 Channel (T1041) describes how attackers exfiltration over c2 channel to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1041 Exfiltration Over C2 Channel using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1041 Exfiltration Over C2 Channel.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1041 Exfiltration Over C2 Channel in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1105 Ingress Tool Transfer and typical adversary behaviors.", "output": "Ingress Tool Transfer (T1105) describes how attackers ingress tool transfer to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1105 Ingress Tool Transfer using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1105 Ingress Tool Transfer.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1105 Ingress Tool Transfer in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1210 Exploitation of Remote Services and typical adversary behaviors.", "output": "Exploitation of Remote Services (T1210) describes how attackers exploitation of remote services to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1210 Exploitation of Remote Services using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1210 Exploitation of Remote Services.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1210 Exploitation of Remote Services in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1486 Data Encrypted for Impact and typical adversary behaviors.", "output": "Data Encrypted for Impact (T1486) describes how attackers data encrypted for impact to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1486 Data Encrypted for Impact using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1486 Data Encrypted for Impact.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1486 Data Encrypted for Impact in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1110 Brute Force and typical adversary behaviors.", "output": "Brute Force (T1110) describes how attackers brute force to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1110 Brute Force using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1110 Brute Force.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1110 Brute Force in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1087 Account Discovery and typical adversary behaviors.", "output": "Account Discovery (T1087) describes how attackers account discovery to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1087 Account Discovery using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1087 Account Discovery.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1087 Account Discovery in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1018 Remote System Discovery and typical adversary behaviors.", "output": "Remote System Discovery (T1018) describes how attackers remote system discovery to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1018 Remote System Discovery using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1018 Remote System Discovery.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1018 Remote System Discovery in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1049 System Network Connections Discovery and typical adversary behaviors.", "output": "System Network Connections Discovery (T1049) describes how attackers system network connections discovery to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1049 System Network Connections Discovery using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1049 System Network Connections Discovery.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1049 System Network Connections Discovery in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1046 Network Service Scanning and typical adversary behaviors.", "output": "Network Service Scanning (T1046) describes how attackers network service scanning to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1046 Network Service Scanning using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1046 Network Service Scanning.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1046 Network Service Scanning in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1069 Permission Groups Discovery and typical adversary behaviors.", "output": "Permission Groups Discovery (T1069) describes how attackers permission groups discovery to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1069 Permission Groups Discovery using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1069 Permission Groups Discovery.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1069 Permission Groups Discovery in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1082 System Information Discovery and typical adversary behaviors.", "output": "System Information Discovery (T1082) describes how attackers system information discovery to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1082 System Information Discovery using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1082 System Information Discovery.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1082 System Information Discovery in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1056 Input Capture and typical adversary behaviors.", "output": "Input Capture (T1056) describes how attackers input capture to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1056 Input Capture using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1056 Input Capture.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1056 Input Capture in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1053 Scheduled Task/Job and typical adversary behaviors.", "output": "Scheduled Task/Job (T1053) describes how attackers scheduled task/job to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1053 Scheduled Task/Job using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1053 Scheduled Task/Job.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1053 Scheduled Task/Job in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1036 Masquerading and typical adversary behaviors.", "output": "Masquerading (T1036) describes how attackers masquerading to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1036 Masquerading using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1036 Masquerading.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1036 Masquerading in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1070 Indicator Removal on Host and typical adversary behaviors.", "output": "Indicator Removal on Host (T1070) describes how attackers indicator removal on host to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1070 Indicator Removal on Host using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1070 Indicator Removal on Host.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1070 Indicator Removal on Host in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1204 User Execution and typical adversary behaviors.", "output": "User Execution (T1204) describes how attackers user execution to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1204 User Execution using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1204 User Execution.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1204 User Execution in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1547 Boot or Logon Autostart Execution and typical adversary behaviors.", "output": "Boot or Logon Autostart Execution (T1547) describes how attackers boot or logon autostart execution to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1547 Boot or Logon Autostart Execution using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1547 Boot or Logon Autostart Execution.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1547 Boot or Logon Autostart Execution in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1055 Process Injection and typical adversary behaviors.", "output": "Process Injection (T1055) describes how attackers process injection to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1055 Process Injection using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1055 Process Injection.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1055 Process Injection in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1057 Process Discovery and typical adversary behaviors.", "output": "Process Discovery (T1057) describes how attackers process discovery to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1057 Process Discovery using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1057 Process Discovery.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1057 Process Discovery in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1090 Proxy and typical adversary behaviors.", "output": "Proxy (T1090) describes how attackers proxy to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1090 Proxy using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1090 Proxy.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1090 Proxy in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1102 Web Service and typical adversary behaviors.", "output": "Web Service (T1102) describes how attackers web service to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1102 Web Service using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1102 Web Service.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1102 Web Service in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1048 Exfiltration Over Alternative Protocol and typical adversary behaviors.", "output": "Exfiltration Over Alternative Protocol (T1048) describes how attackers exfiltration over alternative protocol to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1048 Exfiltration Over Alternative Protocol using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1048 Exfiltration Over Alternative Protocol.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1048 Exfiltration Over Alternative Protocol in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1027 Obfuscated/Compressed Files and Information and typical adversary behaviors.", "output": "Obfuscated/Compressed Files and Information (T1027) describes how attackers obfuscated/compressed files and information to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1027 Obfuscated/Compressed Files and Information using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1027 Obfuscated/Compressed Files and Information.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1027 Obfuscated/Compressed Files and Information in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Summarize MITRE ATT&CK T1020 Automated Exfiltration and typical adversary behaviors.", "output": "Automated Exfiltration (T1020) describes how attackers automated exfiltration to achieve their goals. Map detections to ATT&CK, test regularly with adversary emulation, and track gaps."}
{"instruction": "List practical detection ideas for T1020 Automated Exfiltration using logs/telemetry.", "output": "Collect EDR/sysmon/process + script block logs; flag unusual parent‑child chains, lateral SMB/WMI/RDP use, data egress patterns, and rare destinations. Correlate with identity signals (MFA failures)."}
{"instruction": "Recommend layered mitigations for T1020 Automated Exfiltration.", "output": "Apply least privilege, harden endpoints, enable MFA, restrict admin tools, segment networks, egress filter, and use application allow‑listing with script controls."}
{"instruction": "Give a short scenario showing T1020 Automated Exfiltration in a real intrusion and how to respond.", "output": "Adversary gains foothold via phishing, runs scripts, dumps creds, moves laterally, exfiltrates via web services. Response: isolate host, rotate creds, block C2, hunt across telemetry, and patch entry vector."}
{"instruction": "Explain CVE-2020-0796 in plain terms and its typical impact.", "output": "CVE-2020-0796: SMBGhost in SMBv3 enabling RCE. Windows SMBv3 compression flaw that can lead to remote code execution; patch immediately and consider disabling SMBv3 compression where applicable."}
{"instruction": "List mitigation steps for CVE-2020-0796 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2020-0796.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2020-0796 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2020-1472 in plain terms and its typical impact.", "output": "CVE-2020-1472: Zerologon privilege escalation via Netlogon. Allows unauthenticated domain takeover by abusing Netlogon; patch DCs, enable secure RPC, monitor for machine account resets."}
{"instruction": "List mitigation steps for CVE-2020-1472 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2020-1472.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2020-1472 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2020-0688 in plain terms and its typical impact.", "output": "CVE-2020-0688: Exchange ECP ViewState deserialization RCE. Static validation keys allowed RCE in Exchange; patch, rotate Exchange machine keys, and restrict internet exposure."}
{"instruction": "List mitigation steps for CVE-2020-0688 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2020-0688.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2020-0688 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2020-1350 in plain terms and its typical impact.", "output": "CVE-2020-1350: SIGRed Windows DNS Server RCE. Wormable DNS server vulnerability; apply patches, block malformed requests at the edge, and monitor DNS service crashes."}
{"instruction": "List mitigation steps for CVE-2020-1350 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2020-1350.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2020-1350 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2020-3452 in plain terms and its typical impact.", "output": "CVE-2020-3452: Cisco ASA/FTD WebVPN path traversal. Unauthenticated file read via web services; update to fixed versions and restrict management interfaces."}
{"instruction": "List mitigation steps for CVE-2020-3452 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2020-3452.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2020-3452 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2021-26855 in plain terms and its typical impact.", "output": "CVE-2021-26855: ProxyLogon SSRF in Microsoft Exchange. Pre‑auth SSRF enabling RCE chain; patch, restrict OWA/ECP access, and hunt webshells."}
{"instruction": "List mitigation steps for CVE-2021-26855 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2021-26855.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2021-26855 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2021-44228 in plain terms and its typical impact.", "output": "CVE-2021-44228: Log4Shell RCE in Apache Log4j2. JNDI lookup RCE; update Log4j to 2.17.0+, remove JndiLookup, and inventory apps using Log4j."}
{"instruction": "List mitigation steps for CVE-2021-44228 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2021-44228.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2021-44228 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2021-34527 in plain terms and its typical impact.", "output": "CVE-2021-34527: PrintNightmare Windows Print Spooler RCE. Spooler privilege escalation/RCE; patch, disable spooler on servers, restrict Point‑and‑Print."}
{"instruction": "List mitigation steps for CVE-2021-34527 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2021-34527.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2021-34527 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2021-40444 in plain terms and its typical impact.", "output": "CVE-2021-40444: MSHTML RCE via crafted Office files. ActiveX control abuse; apply patches, disable ActiveX, and use Protected View."}
{"instruction": "List mitigation steps for CVE-2021-40444 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2021-40444.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2021-40444 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2021-21985 in plain terms and its typical impact.", "output": "CVE-2021-21985: VMware vCenter plugin RCE. Pre‑auth RCE via vSphere Client plugins; patch and restrict access to vCenter from the internet."}
{"instruction": "List mitigation steps for CVE-2021-21985 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2021-21985.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2021-21985 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2022-30190 in plain terms and its typical impact.", "output": "CVE-2022-30190: Follina MSDT RCE via Office docs. URL protocol abuse to invoke MSDT; disable MSDT URL protocol, patch, and block outbound to attacker infra."}
{"instruction": "List mitigation steps for CVE-2022-30190 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2022-30190.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2022-30190 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2022-22965 in plain terms and its typical impact.", "output": "CVE-2022-22965: Spring4Shell RCE in Spring Framework. RCE via data binding on certain deployments; update Spring, upgrade Tomcat/JDK where required, and apply WAF rules."}
{"instruction": "List mitigation steps for CVE-2022-22965 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2022-22965.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2022-22965 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2022-26134 in plain terms and its typical impact.", "output": "CVE-2022-26134: Confluence OGNL injection RCE. Unauthenticated RCE; patch to fixed versions, remove public exposure, and hunt for dropped webshells."}
{"instruction": "List mitigation steps for CVE-2022-26134 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2022-26134.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2022-26134 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2022-22954 in plain terms and its typical impact.", "output": "CVE-2022-22954: VMware Workspace ONE Access SSRF/RCE. Server‑side template injection leading to RCE; patch promptly and restrict management interfaces."}
{"instruction": "List mitigation steps for CVE-2022-22954 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2022-22954.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2022-22954 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2022-1388 in plain terms and its typical impact.", "output": "CVE-2022-1388: F5 BIG‑IP iControl REST auth bypass RCE. Unauthenticated management API access enabling RCE; patch and isolate management plane."}
{"instruction": "List mitigation steps for CVE-2022-1388 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2022-1388.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2022-1388 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-34362 in plain terms and its typical impact.", "output": "CVE-2023-34362: MOVEit Transfer SQL injection. Pre‑auth SQLi leading to data theft and RCE; patch, remove internet exposure until fixed, and review IOCs."}
{"instruction": "List mitigation steps for CVE-2023-34362 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-34362.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-34362 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-4863 in plain terms and its typical impact.", "output": "CVE-2023-4863: libwebp heap overflow affecting browsers. Heap overflow in libwebp; update browsers/libwebp to fixed versions and avoid opening untrusted files."}
{"instruction": "List mitigation steps for CVE-2023-4863 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-4863.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-4863 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-23397 in plain terms and its typical impact.", "output": "CVE-2023-23397: Outlook NTLM hash leak to attacker. Privilege escalation via crafted reminders leading to NTLM relay; patch and block outbound SMB (445)."}
{"instruction": "List mitigation steps for CVE-2023-23397 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-23397.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-23397 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-3519 in plain terms and its typical impact.", "output": "CVE-2023-3519: Citrix/NetScaler ADC unauth RCE. Zero‑day RCE in ADC/Gateway; patch, rotate credentials, and hunt for persistent webshells."}
{"instruction": "List mitigation steps for CVE-2023-3519 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-3519.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-3519 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-20198 in plain terms and its typical impact.", "output": "CVE-2023-20198: Cisco IOS XE Web UI privilege escalation. Pre‑auth creation of admin user; disable web UI, patch, and verify unexpected local users."}
{"instruction": "List mitigation steps for CVE-2023-20198 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-20198.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-20198 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-27350 in plain terms and its typical impact.", "output": "CVE-2023-27350: PaperCut NG/MF auth bypass to RCE. Authentication bypass enabling remote code execution; update to patched builds and review logs for exploit patterns."}
{"instruction": "List mitigation steps for CVE-2023-27350 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-27350.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-27350 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2023-27997 in plain terms and its typical impact.", "output": "CVE-2023-27997: Fortinet FortiOS/FortiProxy SSL‑VPN RCE. Pre‑auth heap overflow; upgrade to fixed versions and restrict SSL‑VPN exposure."}
{"instruction": "List mitigation steps for CVE-2023-27997 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2023-27997.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2023-27997 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2024-3094 in plain terms and its typical impact.", "output": "CVE-2024-3094: xz Utils supply‑chain backdoor. Malicious code in xz/liblzma enabling potential RCE; revert to safe versions, rebuild from clean sources, and verify integrity."}
{"instruction": "List mitigation steps for CVE-2024-3094 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2024-3094.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2024-3094 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2024-3400 in plain terms and its typical impact.", "output": "CVE-2024-3400: PAN‑OS GlobalProtect command injection. Arbitrary file creation leading to RCE; upgrade to fixed PAN‑OS and apply vendor hardening guidance."}
{"instruction": "List mitigation steps for CVE-2024-3400 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2024-3400.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2024-3400 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2024-4577 in plain terms and its typical impact.", "output": "CVE-2024-4577: PHP‑CGI argument injection on Windows. Argument parsing issue enabling code execution/info leak; upgrade PHP and harden web server configs."}
{"instruction": "List mitigation steps for CVE-2024-4577 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2024-4577.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2024-4577 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2024-24919 in plain terms and its typical impact.", "output": "CVE-2024-24919: Check Point VPN information disclosure. Unauthenticated information disclosure; apply vendor hotfixes, rotate credentials, and restrict portal exposure."}
{"instruction": "List mitigation steps for CVE-2024-24919 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2024-24919.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2024-24919 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
{"instruction": "Explain CVE-2024-6387 in plain terms and its typical impact.", "output": "CVE-2024-6387: OpenSSH regreSSHion in sshd. Signal handling regression allowing potential RCE/DoS; upgrade OpenSSH, consider tightening LoginGraceTime."}
{"instruction": "List mitigation steps for CVE-2024-6387 suitable for an enterprise change window.", "output": "• Patch/upgrade to vendor‑fixed versions.\n• Reduce attack surface (remove public exposure, restrict management, enforce MFA).\n• Add virtual patches/WAF rules where applicable.\n• Rotate credentials and tokens that may have been exposed."}
{"instruction": "Propose detection ideas and log sources to find exploitation of CVE-2024-6387.", "output": "Look for abnormal process trees, webshell artifacts, anomalous service accounts, suspicious HTTP parameters, and exfiltration patterns. Correlate EDR, web/app logs, VPN/firewall, and DNS/Proxy telemetry. Use IOCs from vendor/CERT advisories."}
{"instruction": "Give a short incident response playbook for suspected CVE-2024-6387 exploitation.", "output": "Triage scope, isolate affected systems, collect forensic artifacts (memory, logs, binaries), eradicate persistence, patch entry vector, rotate secrets, and communicate with stakeholders. Monitor for reinfection and report as required."}
